<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>y=-480;
x=0;
viewing=false;
viewing_id=0;
highest_population=0;
for (i=0; i&lt;200; i++){
    population_count[i]=0;
}
init_room_speed=room_speed/2;
alarm[0]=room_speed/2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0]=init_room_speed;
highest_population=0;
for (i=0; i&lt;199; i++){
    population_count[i]=population_count[i+1];
    if (population_count[i] &gt; highest_population)
        highest_population=population_count[i];
}
population_count[199]=instance_number(obj_creature);
if (population_count[199] &gt; highest_population)
    highest_population=population_count[199];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_white);
draw_rectangle(x,y,200,-1,false);
draw_set_color(c_black);
if (viewing){
    for (i=0; i&lt;viewing_id.layer1_size; i++){
        draw_text(x+20,y+36+i*16, string(viewing_id.layer1[i]));
    }
    for (i=0; i&lt;viewing_id.layer2_size; i++){
        draw_text(x+80,y+36+i*16, string(viewing_id.layer2[i]));
    }
    for (i=0; i&lt;viewing_id.layer3_size; i++){
        draw_text(x+140,y+36+i*16, string(viewing_id.layer3[i]));
    }
    
    for (i=0; i&lt;viewing_id.layer1_size; i++){
        for (j=0; j&lt;viewing_id.layer2_size; j++){
            draw_line_width(x+60,y+44+i*16,x+75,y+44+j*16, viewing_id.WL12[i,j]);
        }
    }
    for (i=0; i&lt;viewing_id.layer2_size; i++){
        for (j=0; j&lt;viewing_id.layer3_size; j++){
            draw_line_width(x+120,y+44+i*16,x+135,y+44+j*16, viewing_id.WL23[i,j]);
        }
    }
    draw_text(x, y+16, "Species id: " + string(viewing_id.species_id)+"-"+string(viewing_id.gen)+"("+string(viewing_id.big_mutations)+")" )
}

draw_text(x,y, "FPS: " + string(fps));
//draw_text(x,y+8, string(world.cubes_rendered));
draw_text(x,y+460, "Temp: " + string(global.temp));
draw_text(x,y+444, "Water: " + string(world.water_height));
draw_text(x+100,y+444, "Middle: " + string(world.water_height_middle));
draw_text(x+100,y+460, "Year: " + string(world.timer/1200));

if (highest_population &lt;= 150){
    population_scale=1;
    draw_text(x+4,y+274, "150");
}else{
    draw_text(x+4,y+274, string(highest_population));
    population_scale=150/highest_population;
}
draw_rectangle(x,y+290,x+200,y+290, false);
for (i=0; i&lt;199; i++){
    draw_rectangle(x+i, y+440-population_count[i]*population_scale,x+1+i,y+440, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
