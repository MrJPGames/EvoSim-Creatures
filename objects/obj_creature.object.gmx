<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_creature_collision</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Energy
min_yums=100;
yums=130;
//Movement
dir=0;
spd=0;
max_speed=8;
max_rot_speed=10;
//Things
eat=0;
birth=0;

//Vision
v_0[0]=0;
v_1[0]=0;
v_2[0]=0;
v_0[1]=0;
v_1[1]=0;
v_2[1]=0;
//Other
body_col=0;
mouth_col=0;
timer=0;
max_yums=450;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Death
if (yums &lt; min_yums or keyboard_check_pressed(ord("D"))){
    if (obj_camera_controller.follow_id == id){
        obj_camera_controller.following=false;
    }
    if (obj_brain_viewer.viewing_id == id){
        obj_brain_viewer.viewing=false;
    }
    //Static 0.5 change as it is always at min yums (so static ammount of energy)
    world.tile_real_color[floor(x/32),floor(y/32)]+=sign(body_col-world.tile_real_color[floor(x/32),floor(y/32)])*0.05;
    if (world.tile_real_color[floor(x/32),floor(y/32)] &gt; 1){
        world.tile_real_color[floor(x/32),floor(y/32)]=1;
    }else if (world.tile_real_color[floor(x/32),floor(y/32)] &lt; 0){
        world.tile_real_color[floor(x/32),floor(y/32)]=0;
    }
    world.tile_yums[floor(x/32),floor(y/32)]+=yums;
    if (world.tile_yums[floor(x/32),floor(y/32)] &gt; 255){
        world.tile_yums[floor(x/32),floor(y/32)]=255;
    }
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Vision
i=floor(x/32);
j=floor(y/32);
if (i &gt; 0 and i &lt; world.tile_width and j&gt;0 and j&lt;world.tile_height){
    v_0[0]=world.tile_real_color[i,j];
    v_0[1]=world.tile_yums[i,j]/255
}else{
    v_0[0]=-1;
    v_0[1]=-1
}
if ( !collision_line(x,y,x+lengthdir_x(60,dir-30),y+lengthdir_y(60,dir-30),obj_creature,false,true) ){
    i=floor(round((x+lengthdir_x(60,dir-30)))/32)
    j=floor(round((y+lengthdir_y(60,dir-30)))/32)
    if (i &gt; 0 and i &lt; world.tile_width and j&gt;0 and j&lt;world.tile_height){
        v_1[0]=world.tile_real_color[i,j];
        v_1[1]=world.tile_yums[i,j]/255
    }else{
        v_1[0]=-1;
        v_1[1]=-1
    }
}else{
    creature_viewing=collision_line(x,y,x+lengthdir_x(60,dir-30),y+lengthdir_y(60,dir-30),obj_creature,false,true);
    v_1[0]=creature_viewing.body_col;
    v_1[1]=creature_viewing.yums/max_yums;
}
if ( !collision_line(x,y,x+lengthdir_x(60,dir+30),y+lengthdir_y(60,dir+30),obj_creature,false,true) ){
    i=floor((x+lengthdir_x(60,dir+30))/32)
    j=floor((y+lengthdir_y(60,dir+30))/32)
    if (i &gt; 0 and i &lt; world.tile_width and j&gt;0 and j&lt;world.tile_height){
        v_2[0]=world.tile_real_color[i,j];
        v_2[1]=world.tile_yums[i,j]/255
    }else{
        v_2[0]=-1;
        v_2[1]=-1;
    }
}else{
    creature_viewing=collision_line(x,y,x+lengthdir_x(60,dir+30),y+lengthdir_y(60,dir+30),obj_creature,false,true);
    v_1[0]=creature_viewing.body_col;
    v_1[1]=creature_viewing.yums/max_yums;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update brain
//Update inputs
layer1[0]=v_0[0];
layer1[1]=v_0[1];
layer1[2]=v_1[0];
layer1[3]=v_1[1];
layer1[4]=v_2[0];
layer1[5]=v_2[1];
layer1[6]=1;
layer1[7]=global.temp;

//Updating brain
for (i=0; i&lt;layer2_size; i++){
    layer2[i]=0;
    divide_by=0;
    for (j=0; j&lt;layer1_size; j++){
        layer2[i]+=layer1[j]*WL12[j,i];
        divide_by+=abs(WL12[j,i]);
    }
    layer2[i]=layer2[i]/divide_by;
}

for (i=0; i&lt;layer3_size; i++){
    layer3[i]=0;
    divide_by=0;
    for (j=0; j&lt;layer2_size; j++){
        layer3[i]+=layer2[j]*WL23[j,i];
        divide_by+=abs(WL23[j,i]);
    }
    layer3[i]=layer3[i]/divide_by;
}

dir+=layer3[0]*max_rot_speed;
spd=layer3[1]*max_speed;
eat=layer3[2];
birth=layer3[3];
body_col=abs(layer3[4]);
mouth_col=abs(layer3[5]);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Manual Controls
if (obj_brain_viewer.viewing_id == id){
    if (keyboard_check_pressed(ord("D"))){
        birth=1;
    }
    if (keyboard_check_pressed(ord("F"))){
        yums=0;
    }
    if (keyboard_check_pressed(ord("C"))){
        yums+=140;
        birth=1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
image_xscale=yums/100;
image_yscale=yums/100;


x_mov=lengthdir_x(spd,dir);
y_mov=lengthdir_y(spd,dir);

//Don't go outside of world map
while (x+x_mov-(yums/100*16) &lt; 0){
    x_mov+=1;
}
while (x+x_mov+(yums/100*16) &gt; world.tile_width*32){
    x_mov-=1;
}

while (y+y_mov-(yums/100*16) &lt; 0){
    y_mov+=1;
}
while (y+y_mov+(yums/100*16) &gt; world.tile_height*32){
    y_mov-=1;
}

x+=x_mov;
y+=y_mov;

tries=0;

//Don't get into friends or foes
while (collision_circle(x, y, yums/100*16,obj_creature,true,true) != noone and tries &lt; 50){
    collided_object=collision_circle(x, y, yums/100*16,obj_creature,true,true);
    req_dist=(collided_object.yums/100*16)+(yums/100*16);
    ang_between_objects=point_direction(x,y,collided_object.x, collided_object.y);
    cur_dist=point_distance(x,y,collided_object.x, collided_object.y);
    needed_dist=req_dist-cur_dist;
    x_mov=lengthdir_x(needed_dist, ang_between_objects-180);
    y_mov=lengthdir_y(needed_dist, ang_between_objects-180);
    x+=x_mov;
    y+=y_mov;
    tries++;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Eat
if (eat &gt; 0){
    //Takes half of regular frame energy consumption
    yums-=0.25;
    i=floor(x/32);
    j=floor(y/32);
    if (i &gt; 0  &amp;&amp; j &gt; 0 &amp;&amp; i &lt; world.tile_width &amp;&amp; j &lt; world.tile_height){
        if (world.tile_yums[i,j] &gt; 1){
            yums+=0.5+0.5*cos(pi*(abs(world.tile_real_color[i,j]-mouth_col)));
            world.tile_yums[i,j]-=1;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Energy Management
//Regular energy loss
yums+=(global.temp-1)*0.2-0.1; //Between -0.5 and -0.1
//Energy loss due to motion (At max speed 0.01 or 1/4 of normal energy loss)
yums-=0.1*((spd/max_speed)^2);
//Elderly tax
timer+=1;
yums-=timer*0.0001

if (yums &gt; max_yums){
    yums=max_yums;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get Baby
if ( (birth &gt; 0) &amp;&amp; yums &gt; min_yums*2+40){
    baby=instance_create(x,y,obj_creature);
    baby.big_mutations=big_mutations;
    yums-=min_yums+10;
    create_brain_offspring(id, baby);
    baby.species_id=species_id;
    baby.gen=gen+1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>obj_camera_controller.following=1;
obj_camera_controller.follow_id=id;
obj_brain_viewer.viewing=1;
obj_brain_viewer.viewing_id=id;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.rendering &gt; 1){
    //Set color to current body color
    draw_set_color(make_color_hsv(body_col*255, 255,255));
    //Draw body
    draw_circle(x,y, yums/100*16, false);
    draw_set_color(make_color_hsv(mouth_col*255, 255,255));
    draw_circle(x,y, 10, false);
    draw_set_color(c_black);
    //Draw min-life circle
    draw_circle(x,y, min_yums/100*16, true);
    //draw "vision" lines
    if (v_1[0] == -1){
        draw_set_color(c_white);
    }
    draw_line(x,y,x+lengthdir_x(60,dir-30),y+lengthdir_y(60,dir-30));
    if (v_2[0] == -1){
        draw_set_color(c_white); 
    }else{
        draw_set_color(c_black);
    }
    draw_line(x,y,x+lengthdir_x(60,dir+30),y+lengthdir_y(60,dir+30));
    
    
    //draw_arrow(x-lengthdir_x(yums/2,direction),y-lengthdir_y(yums/2,direction),x+lengthdir_x(yums/2,direction),y+lengthdir_y(yums/2,direction),20);
}else if (global.rendering == 1){
    //Set color to current body color
    draw_set_color(make_color_hsv(body_col*255, 255,255));
    //Draw body
    draw_circle(x,y, yums/100*16, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
