<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_world</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set random seed
show_message("Copyright (C) 2016  Jasper Peters

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.");
seed=get_string("Set world seed: ", current_time);
random_set_seed(seed);

global.temp=0;
global.rendering=3;
timer=0;

//Load only width and height data of map
tile_width=100;
tile_height=100;

//Init map to all 0s
for (i=0; i&lt;tile_width; i++){
    for (j=0; j&lt;tile_width; j++){
        tile_yums[i,j]=128;
        tile[i,j]=-1;
        tile_val[i,j]=-10;
    }
}

//Load land data
water_height=0.33;
water_height_middle=0.33;
water_height_diviation=0.02;

for (i=0; i&lt;11; i++){
    for (j=0; j&lt;11; j++){
        temp_map[i,j]=random_range(0,1);
        tile_val[i*10,j*10]=temp_map[i,j];
    }
}
for (j=0; j&lt;=10; j++){   
    for (i=0; i&lt;10; i++){
        for (k=0; k&lt;=10; k++){
            tile_val[i*10+k,j*10]=(((10-k)/10)*tile_val[i*10,j*10]+(k/10)*tile_val[i*10+10,j*10]);
        }
    }
}
for (j=0; j&lt;10; j++){   
    for (i=0; i&lt;=100; i++){
        for (k=0; k&lt;=10; k++){
            tile_val[i,j*10+k]=(((10-k)/10)*tile_val[i,j*10]+(k/10)*tile_val[i,j*10+10]);
        }
    }
}
for (i=0; i&lt;tile_width; i++){
    for (j=0; j&lt;tile_height; j++){
        if (tile_val[i,j] &lt; water_height){
            tile[i,j]=-1;
        }else{
            tile[i,j]=(tile_val[i,j]-water_height)*(1/(1-water_height));
        }
    }
}

for (i=0; i&lt;tile_width; i++){
    for (j=0; j&lt;tile_width; j++){
        tile_real_color[i,j]=tile[i,j];
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Growth
for (i=0; i&lt;tile_width; i++){
    for (j=0; j&lt;tile_height; j++){
        if (tile[i,j] != -1 &amp;&amp; tile_yums[i,j] &lt; 255){
            tile_yums[i,j]+=0.075+global.temp*0.075; //Between 0 and 0.15
            tile_real_color[i,j]+=(sign(tile[i,j]-tile_real_color[i,j]))*0.00025;
            
            if (tile_real_color[i,j] &gt; 1) tile_real_color[i,j] = 1;
            if (tile_real_color[i,j] &lt; 0) tile_real_color[i,j] = 0;
        }
        if (tile_yums[i,j] &gt; 255) tile_yums[i,j]=255;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///World and render management
if (keyboard_check_pressed(ord("K"))){
    room_restart();
}
if (keyboard_check_pressed(ord("S"))){
    if (room_speed == 60){
        room_speed=1000;
    }else{
        room_speed=60;
    }
}
if (keyboard_check_pressed(ord("R"))){
    switch(global.rendering){
        case 0:
            global.rendering=3;
            break;
        case 1:
            global.rendering=0;
            break;
        case 2:
            global.rendering=1;
            break;
        case 3:
            global.rendering=2;
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Water level
old_water_height=water_height;
//Control water level (height)
if (keyboard_check_pressed(vk_up)){
    water_height_middle+=0.01;
    if (water_height_middle+water_height_diviation &gt; 1)
        water_height_middle=1-water_height_diviation;
}else if(keyboard_check_pressed(vk_down)){
    water_height_middle-=0.01;
    if (water_height_middle-water_height_diviation &lt; 0)
        water_height_middle=water_height_diviation;
}
water_height=water_height_middle+water_height_diviation*sin((1/150)*pi*timer);
//Update map if water level (height) is changed
if (water_height != old_water_height){
    for (i=0; i&lt;tile_width; i++){
        for (j=0; j&lt;tile_height; j++){
            if (tile_val[i,j] &lt; water_height){
                //Make water if val below new water level (height)
                tile[i,j]=-1;
                tile_real_color[i,j]=-1;
            }else{
                old_tile=tile[i,j];
                tile[i,j]=(tile_val[i,j]-water_height)*(1/(1-water_height));
                oldtrc=tile_real_color[i,j];
                dir=0;
                if (old_tile == -1){
                    //If tile was under water make real color the new value of the tile
                    //Could still be underwater FYI
                    tile_real_color[i,j]=tile[i,j];
                }else{
                    //Calculate proper new real color value
                    tile_real_color[i,j]=(tile_real_color[i,j]-old_water_height*tile_real_color[i,j]+old_water_height-water_height)/(1-water_height);
                    if (tile_real_color[i,j] &lt; 0)
                        tile_real_color[i,j]=0;
                    if (tile_real_color[i,j] &gt; 1)
                        tile_real_color[i,j]=1;
                }
                /*
                if (tile_real_color[i,j] &gt; 1 || tile_real_color[i,j] &lt; 0){
                     show_message("Tile[" + string(i) + "," + string(j) + "]=" + string(tile[i,j]) + " old_tile:  " + string(tile[i,j]) + " trc: " + string(tile_real_color[i,j]) + " oldtrc: " + string(oldtrc) + " dir: " + string(dir));
                }
                */
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update temp
timer+=1;
global.temp=0.25+0.75*sin((1/600)*pi*timer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.rendering &gt;= 3){
    for (i=0; i&lt;tile_width; i++){
        for (j=0; j&lt;tile_height; j++){
            if (tile[i,j] != -1){
                col=make_color_hsv(tile_real_color[i,j]*255,40+tile_yums[i,j]/255*215,125+tile_yums[i,j]/255*130);
                draw_set_color(col);
                if ( ( (i*32 &gt; view_xview[0] &amp;&amp; j*32 &gt; view_yview[0]) or (i*32+32 &gt; view_xview[0] &amp;&amp; j*32+32 &gt; view_yview[0]) ) &amp;&amp; (i*32 &lt; view_wview[0]+view_xview[0] &amp;&amp; j*32 &lt; view_hview[0]+view_yview[0]) ){
                    draw_rectangle(i*32,j*32,i*32+31,j*32+31,false);
                    if (i == floor(mouse_x/32) &amp;&amp; j == floor(mouse_y/32) ){  
                        draw_set_color(c_black);   
                        draw_rectangle(i*32,j*32,i*32+30,j*32+30,true);        
                        draw_text_transformed(i*32,j*32, string(tile_yums[i,j]),0.6,0.6,0)
                        draw_text_transformed(i*32,j*32+8, string(tile[i,j]),0.6,0.6,0); 
                        draw_text_transformed(i*32,j*32+16, string(tile_real_color[i,j]),0.6,0.6,0); 
                    }
                }
                //draw_text(i*32+4,j*32+8,string(round((tile[i,j]*10))/10));
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
